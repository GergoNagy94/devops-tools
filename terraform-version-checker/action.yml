name: 'Terraform Module Version Checker'
description: 'Check Terraform module versions in Terragrunt configurations'
branding:
  icon: 'check-circle'
  color: 'green'

inputs:
  environment:
    description: 'Environment directory to scan'
    required: true
    default: 'units'
  outdated-only:
    description: 'Show only outdated modules'
    required: false
    default: 'false'

outputs:
  report-file:
    description: 'Path to the generated report file'
    value: ${{ steps.generate.outputs.report-file }}
  outdated-count:
    description: 'Number of outdated modules found'
    value: ${{ steps.generate.outputs.outdated-count }}

runs:
  using: 'composite'
  steps:
    - name: Check dependencies
      shell: bash
      run: |
        command -v curl >/dev/null 2>&1 || { echo "curl is required but not installed."; exit 1; }
        command -v jq >/dev/null 2>&1 || { echo "jq is required but not installed."; exit 1; }

    - name: Generate Terraform version report
      id: generate
      shell: bash
      run: |
        set -euo pipefail

        ENVIRONMENT="${{ inputs.environment }}"
        OUTDATED_ONLY="${{ inputs.outdated-only }}"
        ENV_BASENAME=$(basename "$ENVIRONMENT")
        
        [[ ! -d "$ENVIRONMENT" ]] && { echo "[ERROR] Directory '$ENVIRONMENT' not found."; exit 1; }
        
        OUTPUT_FILE="$ENVIRONMENT/terraform-versions-$ENV_BASENAME$([[ $OUTDATED_ONLY == true ]] && echo '-outdated').yml"

        extract_source() {
            grep -E '^\s*source\s*=' "$1" | grep -o '"[^"]*"' | tr -d '"' | head -1
        }

        parse_git_source() {
            local source="$1"
            if [[ "$source" =~ ^git::([^?]+)(\?ref=(.+))?$ ]]; then
                local url="${BASH_REMATCH[1]}" ref="${BASH_REMATCH[3]:-main}" subpath=""
                if [[ "$url" =~ ^(https?://[^/]+/[^/]+/[^/]+)//(.+)$ ]]; then
                    url="${BASH_REMATCH[1]}" subpath="${BASH_REMATCH[2]}"
                fi
                echo "$url|$ref|$subpath"
            else
                echo "||"
            fi
        }

        get_repo() {
            [[ "$1" =~ github\.com[:/]([^/]+)/([^/\.]+)(\.git)?$ ]] && echo "${BASH_REMATCH[1]}/${BASH_REMATCH[2]}"
        }

        get_latest() {
            local repo="$1" current="$2" rel tag
            rel=$(curl -H "Authorization: Bearer $GITHUB_TOKEN" -s "https://api.github.com/repos/$repo/releases/latest" | jq -r '.tag_name // empty' 2>/dev/null)
            [[ -n "$rel" ]] && echo "$rel" && return
            tag=$(curl -H "Authorization: Bearer $GITHUB_TOKEN" -s "https://api.github.com/repos/$repo/tags?per_page=1" | jq -r '.[0].name // empty' 2>/dev/null)
            echo "${tag:-$current}"
        }

        get_type() {
            [[ "$1" =~ ^git:: ]] && echo "git" && return
            [[ "$1" =~ ^\.\./ ]] && echo "local" && return
            echo "unknown"
        }

        results=()
        while IFS= read -r -d '' file; do
            unit=$(basename "$(dirname "$file")")
            source=$(extract_source "$file")
            [[ -z "$source" ]] && continue
            
            type=$(get_type "$source")
            
            if [[ $type == "git" ]]; then
                IFS="|" read url current path <<<"$(parse_git_source "$source")"
                repo=$(get_repo "$url")
                if [[ -n "$repo" ]]; then
                    latest=$(get_latest "$repo" "$current")
                    status=$([[ "$current" == "$latest" ]] && echo "up-to-date" || echo "outdated")
                    results+=("$unit|${repo}${path:+//${path}}|$current|$latest|$status|git")
                else
                    results+=("$unit|$url|$current|$current|up-to-date|git")
                fi
            elif [[ $type == "local" ]]; then
                results+=("$unit|$(basename "$source")|local|local|up-to-date|local")
            else
                results+=("$unit|$source|unknown|unknown|unknown|unknown")
            fi
        done < <(find "$ENVIRONMENT" -name "terragrunt.hcl" -type f -print0)

        if [[ "$OUTDATED_ONLY" == "true" ]]; then
            filtered=()
            for result in "${results[@]}"; do
                IFS='|' read -r unit mod cur lat stat type <<<"$result"
                [[ "$stat" == "outdated" ]] && filtered+=("$result")
            done
            [[ ${#filtered[@]} -eq 0 ]] && { echo "report-file=" >> $GITHUB_OUTPUT; echo "outdated-count=0" >> $GITHUB_OUTPUT; exit 0; }
            results=("${filtered[@]}")
        fi

        {
            echo "# Generated: $(date '+%Y-%m-%d %H:%M:%S UTC')"
            echo "# Environment: $ENVIRONMENT"
            echo "# Report Type: $([[ $OUTDATED_ONLY == true ]] && echo 'Outdated Only' || echo 'Full Report')"
            echo ""
            echo "terraform_modules:"
            for result in "${results[@]}"; do
                IFS='|' read -r unit module_name current latest status type <<<"$result"
                echo "  - unit_name: \"$unit\""
                echo "    module_name: \"$module_name\""
                echo "    module_type: \"$type\""
                echo "    current_version: \"$current\""
                echo "    latest_version: \"$latest\""
                echo "    status: \"$status\""
                echo "    needs_update: $([[ $status == outdated ]] && echo true || echo false)"
                echo ""
            done
        } > "$OUTPUT_FILE"

        outdated_count=$(grep -c "status: \"outdated\"" "$OUTPUT_FILE" 2>/dev/null || echo 0)
        echo "report-file=$OUTPUT_FILE" >> $GITHUB_OUTPUT
        echo "outdated-count=$outdated_count" >> $GITHUB_OUTPUT